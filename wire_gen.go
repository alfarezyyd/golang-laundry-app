// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-playground/validator"
	"github.com/google/wire"
	"github.com/julienschmidt/httprouter"
	"golang-laundry-app/app"
	"golang-laundry-app/controller"
	impl3 "golang-laundry-app/controller/impl"
	"golang-laundry-app/repository"
	"golang-laundry-app/repository/impl"
	"golang-laundry-app/usecase"
	impl2 "golang-laundry-app/usecase/impl"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from injector.go:

func InitializedHandler() *httprouter.Router {
	employeeRepositoryImpl := impl.NewEmployeeRepositoryImpl()
	branchRepositoryImpl := impl.NewBranchRepositoryImpl()
	addressRepositoryImpl := impl.NewAddressRepositoryImpl()
	db := app.NewSetupDatabase()
	validate := validator.New()
	addressUsecaseImpl := impl2.NewAddressUsecaseImpl(addressRepositoryImpl, db, validate)
	branchUsecaseImpl := impl2.NewBranchUsecaseImpl(branchRepositoryImpl, addressUsecaseImpl, db, validate)
	employeeUsecaseImpl := impl2.NewEmployeeUsecaseImpl(employeeRepositoryImpl, branchUsecaseImpl, addressUsecaseImpl, db, validate)
	employeeControllerImpl := impl3.NewEmployeeControllerImpl(employeeUsecaseImpl)
	branchControllerImpl := impl3.NewBranchControllerImpl(branchUsecaseImpl)
	inventoryRepositoryImpl := impl.NewInventoryRepositoryImpl()
	inventoryUsecaseImpl := impl2.NewInventoryUsecaseImpl(inventoryRepositoryImpl, employeeRepositoryImpl, db, validate)
	inventoryControllerImpl := impl3.NewInventoryControllerImpl(inventoryUsecaseImpl)
	serviceRepositoryImpl := impl.NewServiceRepositoryImpl()
	serviceUsecaseImpl := impl2.NewServiceUsecaseImpl(serviceRepositoryImpl, db, validate)
	serviceControllerImpl := impl3.NewServiceControllerImpl(serviceUsecaseImpl)
	promoRepositoryImpl := impl.NewPromoRepositoryImpl()
	promoUsecaseImpl := impl2.NewPromoUsecaseImpl(promoRepositoryImpl, db, validate)
	promoControllerImpl := impl3.NewPromoControllerImpl(promoUsecaseImpl)
	userRepositoryImpl := impl.NewUserRepositoryImpl()
	orderRepositoryImpl := impl.NewOrderRepositoryImpl()
	orderUsecaseImpl := impl2.NewOrderUsecaseImpl(orderRepositoryImpl, inventoryUsecaseImpl, promoUsecaseImpl, db, validate)
	userUsecaseImpl := impl2.NewUserUsecaseImpl(userRepositoryImpl, addressUsecaseImpl, orderUsecaseImpl, db, validate)
	userControllerImpl := impl3.NewUserControllerImpl(userUsecaseImpl)
	adminRepositoryImpl := impl.NewAdminRepositoryImpl()
	adminUsecaseImpl := impl2.NewAdminUsecaseImpl(adminRepositoryImpl, addressUsecaseImpl, branchRepositoryImpl, db, validate)
	adminControllerImpl := impl3.NewAdminControllerImpl(adminUsecaseImpl)
	orderControllerImpl := impl3.NewOrderControllerImpl(orderUsecaseImpl)
	authControllerImpl := impl3.NewAuthControllerImpl(userUsecaseImpl)
	router := app.NewSetupRouter(employeeControllerImpl, branchControllerImpl, inventoryControllerImpl, serviceControllerImpl, promoControllerImpl, userControllerImpl, adminControllerImpl, orderControllerImpl, authControllerImpl)
	return router
}

// injector.go:

var addressSet = wire.NewSet(impl.NewAddressRepositoryImpl, wire.Bind(new(repository.AddressRepository), new(*impl.AddressRepositoryImpl)), impl2.NewAddressUsecaseImpl, wire.Bind(new(usecase.AddressUsecase), new(*impl2.AddressUsecaseImpl)))

var employeeSet = wire.NewSet(impl.NewEmployeeRepositoryImpl, wire.Bind(new(repository.EmployeeRepository), new(*impl.EmployeeRepositoryImpl)), impl2.NewEmployeeUsecaseImpl, wire.Bind(new(usecase.EmployeeUsecase), new(*impl2.EmployeeUsecaseImpl)), impl3.NewEmployeeControllerImpl, wire.Bind(new(app.EmployeeController), new(*impl3.EmployeeControllerImpl)))

var branchSet = wire.NewSet(impl.NewBranchRepositoryImpl, wire.Bind(new(repository.BranchRepository), new(*impl.BranchRepositoryImpl)), impl2.NewBranchUsecaseImpl, wire.Bind(new(usecase.BranchUsecase), new(*impl2.BranchUsecaseImpl)), impl3.NewBranchControllerImpl, wire.Bind(new(app.BranchController), new(*impl3.BranchControllerImpl)))

var inventorySet = wire.NewSet(impl.NewInventoryRepositoryImpl, wire.Bind(new(repository.InventoryRepository), new(*impl.InventoryRepositoryImpl)), impl2.NewInventoryUsecaseImpl, wire.Bind(new(usecase.InventoryUsecase), new(*impl2.InventoryUsecaseImpl)), impl3.NewInventoryControllerImpl, wire.Bind(new(app.InventoryController), new(*impl3.InventoryControllerImpl)))

var serviceSet = wire.NewSet(impl.NewServiceRepositoryImpl, wire.Bind(new(repository.ServiceRepository), new(*impl.ServiceRepositoryImpl)), impl2.NewServiceUsecaseImpl, wire.Bind(new(usecase.ServiceUsecase), new(*impl2.ServiceUsecaseImpl)), impl3.NewServiceControllerImpl, wire.Bind(new(app.ServiceController), new(*impl3.ServiceControllerImpl)))

var promoSet = wire.NewSet(impl.NewPromoRepositoryImpl, wire.Bind(new(repository.PromoRepository), new(*impl.PromoRepositoryImpl)), impl2.NewPromoUsecaseImpl, wire.Bind(new(usecase.PromoUsecase), new(*impl2.PromoUsecaseImpl)), impl3.NewPromoControllerImpl, wire.Bind(new(app.PromoController), new(*impl3.PromoControllerImpl)))

var userSet = wire.NewSet(impl.NewUserRepositoryImpl, wire.Bind(new(repository.UserRepository), new(*impl.UserRepositoryImpl)), impl2.NewUserUsecaseImpl, wire.Bind(new(usecase.UserUsecase), new(*impl2.UserUsecaseImpl)), impl3.NewUserControllerImpl, wire.Bind(new(app.UserController), new(*impl3.UserControllerImpl)))

var adminSet = wire.NewSet(impl.NewAdminRepositoryImpl, wire.Bind(new(repository.AdminRepository), new(*impl.AdminRepositoryImpl)), impl2.NewAdminUsecaseImpl, wire.Bind(new(usecase.AdminUsecase), new(*impl2.AdminUsecaseImpl)), impl3.NewAdminControllerImpl, wire.Bind(new(app.AdminController), new(*impl3.AdminControllerImpl)))

var orderSet = wire.NewSet(impl.NewOrderRepositoryImpl, wire.Bind(new(repository.OrderRepository), new(*impl.OrderRepositoryImpl)), impl2.NewOrderUsecaseImpl, wire.Bind(new(usecase.OrderUsecase), new(*impl2.OrderUsecaseImpl)), impl3.NewOrderControllerImpl, wire.Bind(new(app.OrderController), new(*impl3.OrderControllerImpl)))

var authSet = wire.NewSet(impl3.NewAuthControllerImpl, wire.Bind(new(controller.AuthController), new(*impl3.AuthControllerImpl)))

var allSet = wire.NewSet(
	addressSet, employeeSet, branchSet, inventorySet, serviceSet, promoSet, adminSet, userSet, orderSet, authSet,
)
